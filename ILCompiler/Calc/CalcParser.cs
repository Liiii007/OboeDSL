//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calc.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class CalcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		MATHFUNC=32, ID=33, INT=34, EMPTY=35;
	public const int
		RULE_prog = 0, RULE_assign = 1, RULE_ifstatement = 2, RULE_elsestatement = 3, 
		RULE_whilestatement = 4, RULE_forstatement = 5, RULE_boolexpr = 6, RULE_mathexpr = 7, 
		RULE_value = 8, RULE_id = 9, RULE_varid = 10, RULE_memberid = 11, RULE_mathfunc = 12;
	public static readonly string[] ruleNames = {
		"prog", "assign", "ifstatement", "elsestatement", "whilestatement", "forstatement", 
		"boolexpr", "mathexpr", "value", "id", "varid", "memberid", "mathfunc"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", "'+='", "'-='", "'*='", "'/='", "'++'", "'--'", "'if'", 
		"'('", "')'", "'{'", "'}'", "'else'", "'while'", "'for'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", "'!'", "'*'", "'/'", "'+'", 
		"'-'", "'.'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "MATHFUNC", "ID", "INT", 
		"EMPTY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CalcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext[] ifstatement() {
			return GetRuleContexts<IfstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfstatementContext ifstatement(int i) {
			return GetRuleContext<IfstatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestatementContext[] whilestatement() {
			return GetRuleContexts<WhilestatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilestatementContext whilestatement(int i) {
			return GetRuleContext<WhilestatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstatementContext[] forstatement() {
			return GetRuleContexts<ForstatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForstatementContext forstatement(int i) {
			return GetRuleContext<ForstatementContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 26;
				Match(EMPTY);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 10737517056L) != 0)) {
				{
				{
				State = 38;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__30:
				case ID:
					{
					State = 32;
					assign();
					State = 33;
					Match(T__0);
					}
					break;
				case T__8:
					{
					State = 35;
					ifstatement();
					}
					break;
				case T__14:
					{
					State = 36;
					whilestatement();
					}
					break;
				case T__15:
					{
					State = 37;
					forstatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 40;
					Match(EMPTY);
					}
					}
					State = 45;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 50;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext[] id() {
			return GetRuleContexts<IdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 2, RULE_assign);
		int _la;
		try {
			int _alt;
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 51;
				id();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 52;
					Match(EMPTY);
					}
					}
					State = 57;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 58;
				Match(T__1);
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 59;
					Match(EMPTY);
					}
					}
					State = 64;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 65;
				mathexpr(0);
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 66;
						Match(EMPTY);
						}
						} 
					}
					State = 71;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 72;
				id();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 73;
					Match(EMPTY);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 79;
				Match(T__2);
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 80;
					Match(EMPTY);
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 86;
				id();
				State = 90;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 87;
						Match(EMPTY);
						}
						} 
					}
					State = 92;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				id();
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 94;
					Match(EMPTY);
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 100;
				Match(T__3);
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 101;
					Match(EMPTY);
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 107;
				id();
				State = 111;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 108;
						Match(EMPTY);
						}
						} 
					}
					State = 113;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				id();
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 115;
					Match(EMPTY);
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 121;
				Match(T__4);
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 122;
					Match(EMPTY);
					}
					}
					State = 127;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 128;
				id();
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 129;
						Match(EMPTY);
						}
						} 
					}
					State = 134;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135;
				id();
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 136;
					Match(EMPTY);
					}
					}
					State = 141;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 142;
				Match(T__5);
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 143;
					Match(EMPTY);
					}
					}
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 149;
				id();
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 150;
						Match(EMPTY);
						}
						} 
					}
					State = 155;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 156;
				id();
				State = 157;
				Match(T__6);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 159;
				id();
				State = 160;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsestatementContext elsestatement() {
			return GetRuleContext<ElsestatementContext>(0);
		}
		public IfstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitIfstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfstatementContext ifstatement() {
		IfstatementContext _localctx = new IfstatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_ifstatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(T__8);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 165;
				Match(EMPTY);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(T__9);
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 172;
				Match(EMPTY);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178;
			boolexpr(0);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 179;
				Match(EMPTY);
				}
				}
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 185;
			Match(T__10);
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 186;
				Match(EMPTY);
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(T__11);
			State = 193;
			prog();
			State = 194;
			Match(T__12);
			State = 196;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 195;
				elsestatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsestatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public ElsestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsestatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterElsestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitElsestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsestatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsestatementContext elsestatement() {
		ElsestatementContext _localctx = new ElsestatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_elsestatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 198;
				Match(EMPTY);
				}
				}
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			Match(T__13);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 205;
				Match(EMPTY);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			Match(T__11);
			State = 212;
			prog();
			State = 213;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilestatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public WhilestatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilestatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterWhilestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitWhilestatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilestatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilestatementContext whilestatement() {
		WhilestatementContext _localctx = new WhilestatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_whilestatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(T__14);
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 216;
				Match(EMPTY);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222;
			Match(T__9);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 223;
				Match(EMPTY);
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			boolexpr(0);
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 230;
				Match(EMPTY);
				}
				}
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 236;
			Match(T__10);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 237;
				Match(EMPTY);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			Match(T__11);
			State = 244;
			prog();
			State = 245;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForstatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr() {
			return GetRuleContext<BoolexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgContext prog() {
			return GetRuleContext<ProgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public ForstatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forstatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterForstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitForstatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForstatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForstatementContext forstatement() {
		ForstatementContext _localctx = new ForstatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_forstatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(T__15);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 248;
				Match(EMPTY);
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 254;
			Match(T__9);
			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 255;
					Match(EMPTY);
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__30 || _la==ID) {
				{
				State = 261;
				assign();
				}
			}

			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 264;
				Match(EMPTY);
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270;
			Match(T__0);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 271;
				Match(EMPTY);
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 277;
			boolexpr(0);
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 278;
				Match(EMPTY);
				}
				}
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 284;
			Match(T__0);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 285;
				Match(EMPTY);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 291;
			assign();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 292;
				Match(EMPTY);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298;
			Match(T__10);
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 299;
				Match(EMPTY);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305;
			Match(T__11);
			State = 306;
			prog();
			State = 307;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext[] mathexpr() {
			return GetRuleContexts<MathexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext mathexpr(int i) {
			return GetRuleContext<MathexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext[] boolexpr() {
			return GetRuleContexts<BoolexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolexprContext boolexpr(int i) {
			return GetRuleContext<BoolexprContext>(i);
		}
		public BoolexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterBoolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitBoolexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolexprContext boolexpr() {
		return boolexpr(0);
	}

	private BoolexprContext boolexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolexprContext _localctx = new BoolexprContext(Context, _parentState);
		BoolexprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_boolexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 310;
				mathexpr(0);
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 311;
					Match(EMPTY);
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 317;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8257536L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 318;
					Match(EMPTY);
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 324;
				mathexpr(0);
				}
				break;
			case 2:
				{
				State = 326;
				Match(T__9);
				State = 327;
				boolexpr(0);
				State = 328;
				Match(T__10);
				}
				break;
			case 3:
				{
				State = 330;
				Match(T__24);
				State = 331;
				boolexpr(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 339;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolexprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_boolexpr);
					State = 334;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 335;
					_la = TokenStream.LA(1);
					if ( !(_la==T__22 || _la==T__23) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 336;
					boolexpr(4);
					}
					} 
				}
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MathexprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MathfuncContext mathfunc() {
			return GetRuleContext<MathfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext[] mathexpr() {
			return GetRuleContexts<MathexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext mathexpr(int i) {
			return GetRuleContext<MathexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public MathexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathexpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterMathexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitMathexpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathexprContext mathexpr() {
		return mathexpr(0);
	}

	private MathexprContext mathexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MathexprContext _localctx = new MathexprContext(Context, _parentState);
		MathexprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_mathexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MATHFUNC:
				{
				State = 343;
				mathfunc();
				}
				break;
			case INT:
				{
				State = 344;
				value();
				}
				break;
			case T__9:
				{
				State = 345;
				Match(T__9);
				State = 346;
				mathexpr(0);
				State = 347;
				Match(T__10);
				}
				break;
			case T__30:
			case ID:
				{
				State = 349;
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 358;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new MathexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathexpr);
						State = 352;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 353;
						_la = TokenStream.LA(1);
						if ( !(_la==T__25 || _la==T__26) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 354;
						mathexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new MathexprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mathexpr);
						State = 355;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 356;
						_la = TokenStream.LA(1);
						if ( !(_la==T__27 || _la==T__28) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 357;
						mathexpr(5);
						}
						break;
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(CalcParser.INT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VaridContext varid() {
			return GetRuleContext<VaridContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberidContext memberid() {
			return GetRuleContext<MemberidContext>(0);
		}
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 18, RULE_id);
		try {
			State = 367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365;
				varid();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 2);
				{
				State = 366;
				memberid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CalcParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CalcParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public VaridContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterVarid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitVarid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaridContext varid() {
		VaridContext _localctx = new VaridContext(Context, State);
		EnterRule(_localctx, 20, RULE_varid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(ID);
			State = 384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 370;
					Match(EMPTY);
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 376;
				Match(T__29);
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EMPTY) {
					{
					{
					State = 377;
					Match(EMPTY);
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 383;
				Match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(CalcParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(CalcParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EMPTY() { return GetTokens(CalcParser.EMPTY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY(int i) {
			return GetToken(CalcParser.EMPTY, i);
		}
		public MemberidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterMemberid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitMemberid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberidContext memberid() {
		MemberidContext _localctx = new MemberidContext(Context, State);
		EnterRule(_localctx, 22, RULE_memberid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			Match(T__30);
			State = 387;
			Match(ID);
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 388;
				Match(EMPTY);
				}
				}
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 394;
			Match(T__29);
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EMPTY) {
				{
				{
				State = 395;
				Match(EMPTY);
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 401;
			Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathfuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MATHFUNC() { return GetTokens(CalcParser.MATHFUNC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATHFUNC(int i) {
			return GetToken(CalcParser.MATHFUNC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MathexprContext mathexpr() {
			return GetRuleContext<MathexprContext>(0);
		}
		public MathfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.EnterMathfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICalcListener typedListener = listener as ICalcListener;
			if (typedListener != null) typedListener.ExitMathfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcVisitor<TResult> typedVisitor = visitor as ICalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathfuncContext mathfunc() {
		MathfuncContext _localctx = new MathfuncContext(Context, State);
		EnterRule(_localctx, 24, RULE_mathfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			Match(MATHFUNC);
			State = 404;
			Match(T__9);
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 405;
				mathexpr(0);
				}
				break;
			case 2:
				{
				State = 406;
				Match(MATHFUNC);
				State = 407;
				Match(T__9);
				State = 408;
				mathexpr(0);
				State = 409;
				Match(T__10);
				}
				break;
			}
			State = 413;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return boolexpr_sempred((BoolexprContext)_localctx, predIndex);
		case 7: return mathexpr_sempred((MathexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolexpr_sempred(BoolexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool mathexpr_sempred(MathexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,416,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,5,0,28,8,0,10,0,
		12,0,31,9,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,39,8,0,1,0,5,0,42,8,0,10,0,12,
		0,45,9,0,5,0,47,8,0,10,0,12,0,50,9,0,1,1,1,1,5,1,54,8,1,10,1,12,1,57,9,
		1,1,1,1,1,5,1,61,8,1,10,1,12,1,64,9,1,1,1,1,1,5,1,68,8,1,10,1,12,1,71,
		9,1,1,1,1,1,5,1,75,8,1,10,1,12,1,78,9,1,1,1,1,1,5,1,82,8,1,10,1,12,1,85,
		9,1,1,1,1,1,5,1,89,8,1,10,1,12,1,92,9,1,1,1,1,1,5,1,96,8,1,10,1,12,1,99,
		9,1,1,1,1,1,5,1,103,8,1,10,1,12,1,106,9,1,1,1,1,1,5,1,110,8,1,10,1,12,
		1,113,9,1,1,1,1,1,5,1,117,8,1,10,1,12,1,120,9,1,1,1,1,1,5,1,124,8,1,10,
		1,12,1,127,9,1,1,1,1,1,5,1,131,8,1,10,1,12,1,134,9,1,1,1,1,1,5,1,138,8,
		1,10,1,12,1,141,9,1,1,1,1,1,5,1,145,8,1,10,1,12,1,148,9,1,1,1,1,1,5,1,
		152,8,1,10,1,12,1,155,9,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,163,8,1,1,2,1,2,
		5,2,167,8,2,10,2,12,2,170,9,2,1,2,1,2,5,2,174,8,2,10,2,12,2,177,9,2,1,
		2,1,2,5,2,181,8,2,10,2,12,2,184,9,2,1,2,1,2,5,2,188,8,2,10,2,12,2,191,
		9,2,1,2,1,2,1,2,1,2,3,2,197,8,2,1,3,5,3,200,8,3,10,3,12,3,203,9,3,1,3,
		1,3,5,3,207,8,3,10,3,12,3,210,9,3,1,3,1,3,1,3,1,3,1,4,1,4,5,4,218,8,4,
		10,4,12,4,221,9,4,1,4,1,4,5,4,225,8,4,10,4,12,4,228,9,4,1,4,1,4,5,4,232,
		8,4,10,4,12,4,235,9,4,1,4,1,4,5,4,239,8,4,10,4,12,4,242,9,4,1,4,1,4,1,
		4,1,4,1,5,1,5,5,5,250,8,5,10,5,12,5,253,9,5,1,5,1,5,5,5,257,8,5,10,5,12,
		5,260,9,5,1,5,3,5,263,8,5,1,5,5,5,266,8,5,10,5,12,5,269,9,5,1,5,1,5,5,
		5,273,8,5,10,5,12,5,276,9,5,1,5,1,5,5,5,280,8,5,10,5,12,5,283,9,5,1,5,
		1,5,5,5,287,8,5,10,5,12,5,290,9,5,1,5,1,5,5,5,294,8,5,10,5,12,5,297,9,
		5,1,5,1,5,5,5,301,8,5,10,5,12,5,304,9,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,5,
		6,313,8,6,10,6,12,6,316,9,6,1,6,1,6,5,6,320,8,6,10,6,12,6,323,9,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,333,8,6,1,6,1,6,1,6,5,6,338,8,6,10,6,12,
		6,341,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,351,8,7,1,7,1,7,1,7,1,7,
		1,7,1,7,5,7,359,8,7,10,7,12,7,362,9,7,1,8,1,8,1,9,1,9,3,9,368,8,9,1,10,
		1,10,5,10,372,8,10,10,10,12,10,375,9,10,1,10,1,10,5,10,379,8,10,10,10,
		12,10,382,9,10,1,10,3,10,385,8,10,1,11,1,11,1,11,5,11,390,8,11,10,11,12,
		11,393,9,11,1,11,1,11,5,11,397,8,11,10,11,12,11,400,9,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,412,8,12,1,12,1,12,1,12,0,2,12,
		14,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,4,1,0,17,22,1,0,23,24,1,0,26,
		27,1,0,28,29,466,0,29,1,0,0,0,2,162,1,0,0,0,4,164,1,0,0,0,6,201,1,0,0,
		0,8,215,1,0,0,0,10,247,1,0,0,0,12,332,1,0,0,0,14,350,1,0,0,0,16,363,1,
		0,0,0,18,367,1,0,0,0,20,369,1,0,0,0,22,386,1,0,0,0,24,403,1,0,0,0,26,28,
		5,35,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,0,30,48,
		1,0,0,0,31,29,1,0,0,0,32,33,3,2,1,0,33,34,5,1,0,0,34,39,1,0,0,0,35,39,
		3,4,2,0,36,39,3,8,4,0,37,39,3,10,5,0,38,32,1,0,0,0,38,35,1,0,0,0,38,36,
		1,0,0,0,38,37,1,0,0,0,39,43,1,0,0,0,40,42,5,35,0,0,41,40,1,0,0,0,42,45,
		1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,46,38,
		1,0,0,0,47,50,1,0,0,0,48,46,1,0,0,0,48,49,1,0,0,0,49,1,1,0,0,0,50,48,1,
		0,0,0,51,55,3,18,9,0,52,54,5,35,0,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,
		1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,0,0,0,58,62,5,2,0,0,59,61,
		5,35,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,0,0,0,62,63,1,0,0,0,63,65,
		1,0,0,0,64,62,1,0,0,0,65,69,3,14,7,0,66,68,5,35,0,0,67,66,1,0,0,0,68,71,
		1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,163,1,0,0,0,71,69,1,0,0,0,72,76,
		3,18,9,0,73,75,5,35,0,0,74,73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,
		1,0,0,0,77,79,1,0,0,0,78,76,1,0,0,0,79,83,5,3,0,0,80,82,5,35,0,0,81,80,
		1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,86,1,0,0,0,85,83,
		1,0,0,0,86,90,3,18,9,0,87,89,5,35,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,
		1,0,0,0,90,91,1,0,0,0,91,163,1,0,0,0,92,90,1,0,0,0,93,97,3,18,9,0,94,96,
		5,35,0,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,100,
		1,0,0,0,99,97,1,0,0,0,100,104,5,4,0,0,101,103,5,35,0,0,102,101,1,0,0,0,
		103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,104,
		1,0,0,0,107,111,3,18,9,0,108,110,5,35,0,0,109,108,1,0,0,0,110,113,1,0,
		0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,163,1,0,0,0,113,111,1,0,0,0,114,
		118,3,18,9,0,115,117,5,35,0,0,116,115,1,0,0,0,117,120,1,0,0,0,118,116,
		1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,1,0,0,0,121,125,5,5,0,
		0,122,124,5,35,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,
		126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,132,3,18,9,0,129,131,5,
		35,0,0,130,129,1,0,0,0,131,134,1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,
		133,163,1,0,0,0,134,132,1,0,0,0,135,139,3,18,9,0,136,138,5,35,0,0,137,
		136,1,0,0,0,138,141,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,1,
		0,0,0,141,139,1,0,0,0,142,146,5,6,0,0,143,145,5,35,0,0,144,143,1,0,0,0,
		145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,
		1,0,0,0,149,153,3,18,9,0,150,152,5,35,0,0,151,150,1,0,0,0,152,155,1,0,
		0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,163,1,0,0,0,155,153,1,0,0,0,156,
		157,3,18,9,0,157,158,5,7,0,0,158,163,1,0,0,0,159,160,3,18,9,0,160,161,
		5,8,0,0,161,163,1,0,0,0,162,51,1,0,0,0,162,72,1,0,0,0,162,93,1,0,0,0,162,
		114,1,0,0,0,162,135,1,0,0,0,162,156,1,0,0,0,162,159,1,0,0,0,163,3,1,0,
		0,0,164,168,5,9,0,0,165,167,5,35,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
		166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,175,5,
		10,0,0,172,174,5,35,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,
		0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,1,0,0,0,178,182,3,12,6,0,179,
		181,5,35,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,
		0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,189,5,11,0,0,186,188,5,35,0,
		0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
		192,1,0,0,0,191,189,1,0,0,0,192,193,5,12,0,0,193,194,3,0,0,0,194,196,5,
		13,0,0,195,197,3,6,3,0,196,195,1,0,0,0,196,197,1,0,0,0,197,5,1,0,0,0,198,
		200,5,35,0,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,1,
		0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,208,5,14,0,0,205,207,5,35,0,
		0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,
		211,1,0,0,0,210,208,1,0,0,0,211,212,5,12,0,0,212,213,3,0,0,0,213,214,5,
		13,0,0,214,7,1,0,0,0,215,219,5,15,0,0,216,218,5,35,0,0,217,216,1,0,0,0,
		218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,
		1,0,0,0,222,226,5,10,0,0,223,225,5,35,0,0,224,223,1,0,0,0,225,228,1,0,
		0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,
		233,3,12,6,0,230,232,5,35,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,
		1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,240,5,11,0,
		0,237,239,5,35,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,
		241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,12,0,0,244,245,3,
		0,0,0,245,246,5,13,0,0,246,9,1,0,0,0,247,251,5,16,0,0,248,250,5,35,0,0,
		249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,
		1,0,0,0,253,251,1,0,0,0,254,258,5,10,0,0,255,257,5,35,0,0,256,255,1,0,
		0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,0,260,
		258,1,0,0,0,261,263,3,2,1,0,262,261,1,0,0,0,262,263,1,0,0,0,263,267,1,
		0,0,0,264,266,5,35,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,
		267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,274,5,1,0,0,271,273,
		5,35,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,
		0,275,277,1,0,0,0,276,274,1,0,0,0,277,281,3,12,6,0,278,280,5,35,0,0,279,
		278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,
		0,0,0,283,281,1,0,0,0,284,288,5,1,0,0,285,287,5,35,0,0,286,285,1,0,0,0,
		287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,0,290,288,
		1,0,0,0,291,295,3,2,1,0,292,294,5,35,0,0,293,292,1,0,0,0,294,297,1,0,0,
		0,295,293,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,295,1,0,0,0,298,
		302,5,11,0,0,299,301,5,35,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
		1,0,0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,5,12,0,
		0,306,307,3,0,0,0,307,308,5,13,0,0,308,11,1,0,0,0,309,310,6,6,-1,0,310,
		314,3,14,7,0,311,313,5,35,0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,
		1,0,0,0,314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,321,7,0,0,
		0,318,320,5,35,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,
		322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,3,14,7,0,325,333,1,
		0,0,0,326,327,5,10,0,0,327,328,3,12,6,0,328,329,5,11,0,0,329,333,1,0,0,
		0,330,331,5,25,0,0,331,333,3,12,6,1,332,309,1,0,0,0,332,326,1,0,0,0,332,
		330,1,0,0,0,333,339,1,0,0,0,334,335,10,3,0,0,335,336,7,1,0,0,336,338,3,
		12,6,4,337,334,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,
		340,13,1,0,0,0,341,339,1,0,0,0,342,343,6,7,-1,0,343,351,3,24,12,0,344,
		351,3,16,8,0,345,346,5,10,0,0,346,347,3,14,7,0,347,348,5,11,0,0,348,351,
		1,0,0,0,349,351,3,18,9,0,350,342,1,0,0,0,350,344,1,0,0,0,350,345,1,0,0,
		0,350,349,1,0,0,0,351,360,1,0,0,0,352,353,10,5,0,0,353,354,7,2,0,0,354,
		359,3,14,7,6,355,356,10,4,0,0,356,357,7,3,0,0,357,359,3,14,7,5,358,352,
		1,0,0,0,358,355,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,
		0,361,15,1,0,0,0,362,360,1,0,0,0,363,364,5,34,0,0,364,17,1,0,0,0,365,368,
		3,20,10,0,366,368,3,22,11,0,367,365,1,0,0,0,367,366,1,0,0,0,368,19,1,0,
		0,0,369,384,5,33,0,0,370,372,5,35,0,0,371,370,1,0,0,0,372,375,1,0,0,0,
		373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,380,
		5,30,0,0,377,379,5,35,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,378,1,0,
		0,0,380,381,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,385,5,33,0,0,384,
		373,1,0,0,0,384,385,1,0,0,0,385,21,1,0,0,0,386,387,5,31,0,0,387,391,5,
		33,0,0,388,390,5,35,0,0,389,388,1,0,0,0,390,393,1,0,0,0,391,389,1,0,0,
		0,391,392,1,0,0,0,392,394,1,0,0,0,393,391,1,0,0,0,394,398,5,30,0,0,395,
		397,5,35,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,
		0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,33,0,0,402,23,1,0,0,0,
		403,404,5,32,0,0,404,411,5,10,0,0,405,412,3,14,7,0,406,407,5,32,0,0,407,
		408,5,10,0,0,408,409,3,14,7,0,409,410,5,11,0,0,410,412,1,0,0,0,411,405,
		1,0,0,0,411,406,1,0,0,0,412,413,1,0,0,0,413,414,5,11,0,0,414,25,1,0,0,
		0,54,29,38,43,48,55,62,69,76,83,90,97,104,111,118,125,132,139,146,153,
		162,168,175,182,189,196,201,208,219,226,233,240,251,258,262,267,274,281,
		288,295,302,314,321,332,339,350,358,360,367,373,380,384,391,398,411
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
